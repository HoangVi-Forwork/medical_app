{"ast":null,"code":"import classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport React, { useContext, useRef, useState } from 'react';\nimport genPurePanel from '../_util/PurePanel';\nimport { ConfigContext } from '../config-provider/context';\nimport Popover from '../popover';\nimport theme from '../theme';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style/index';\nimport { customizePrefixCls, generateColor } from './util';\nconst ColorPicker = props => {\n  const {\n    value,\n    defaultValue,\n    format,\n    allowClear = false,\n    presets,\n    children,\n    trigger = 'click',\n    open,\n    disabled,\n    placement = 'bottomLeft',\n    arrow = true,\n    style,\n    className,\n    rootClassName,\n    styles,\n    onFormatChange,\n    onChange,\n    onClear,\n    onOpenChange,\n    getPopupContainer,\n    autoAdjustOverflow = true\n  } = props;\n  const {\n    getPrefixCls,\n    direction\n  } = useContext(ConfigContext);\n  const {\n    token\n  } = theme.useToken();\n  const [colorValue, setColorValue] = useColorState(token.colorPrimary, {\n    value,\n    defaultValue\n  });\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !disabled && openData,\n    onChange: onOpenChange\n  });\n  const [colorCleared, setColorCleared] = useState(false);\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergeRootCls = classNames(rootClassName, rtlCls);\n  const mergeCls = classNames(mergeRootCls, className, hashId);\n  const mergePopupCls = classNames(prefixCls, rtlCls);\n  const popupAllowCloseRef = useRef(true);\n  const handleChange = (data, type, pickColor) => {\n    let color = generateColor(data);\n    if (colorCleared) {\n      setColorCleared(false);\n      const hsba = color.toHsb();\n      // ignore alpha slider\n      if (colorValue.toHsb().a === 0 && type !== 'alpha') {\n        hsba.a = 1;\n        color = generateColor(hsba);\n      }\n    }\n    if (!value) {\n      setColorValue(color);\n    }\n    // Only for drag-and-drop color picking\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n  const handleClear = () => {\n    setColorCleared(true);\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n  const handleChangeComplete = () => {\n    popupAllowCloseRef.current = true;\n  };\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow\n  };\n  const colorBaseProps = {\n    prefixCls,\n    color: colorValue,\n    allowClear,\n    colorCleared,\n    disabled,\n    presets,\n    format,\n    onFormatChange\n  };\n  return wrapSSR( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    onOpenChange: visible => {\n      if (popupAllowCloseRef.current) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    })),\n    overlayClassName: mergePopupCls\n  }, popoverProps), children || /*#__PURE__*/React.createElement(ColorTrigger, {\n    open: popupOpen,\n    className: mergeCls,\n    style: style,\n    color: colorValue,\n    prefixCls: prefixCls,\n    disabled: disabled,\n    colorCleared: colorCleared\n  })));\n};\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\nconst PurePanel = genPurePanel(ColorPicker, 'color-picker', /* istanbul ignore next */\nprefixCls => prefixCls, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}));\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;","map":{"version":3,"names":["classNames","useMergedState","React","useContext","useRef","useState","genPurePanel","ConfigContext","Popover","theme","ColorPickerPanel","ColorTrigger","useColorState","useStyle","customizePrefixCls","generateColor","ColorPicker","props","value","defaultValue","format","allowClear","presets","children","trigger","open","disabled","placement","arrow","style","className","rootClassName","styles","onFormatChange","onChange","onClear","onOpenChange","getPopupContainer","autoAdjustOverflow","getPrefixCls","direction","token","useToken","colorValue","setColorValue","colorPrimary","popupOpen","setPopupOpen","postState","openData","colorCleared","setColorCleared","prefixCls","wrapSSR","hashId","rtlCls","mergeRootCls","mergeCls","mergePopupCls","popupAllowCloseRef","handleChange","data","type","pickColor","color","hsba","toHsb","a","current","toHexString","handleClear","handleChangeComplete","popoverProps","colorBaseProps","createElement","Object","assign","popup","visible","content","onChangeComplete","overlayClassName","process","env","NODE_ENV","displayName","PurePanel","_InternalPanelDoNotUseOrYouWillBeFired"],"sources":["/Users/hoang/Desktop/DoAn/medical_app/web/node_modules/antd/es/color-picker/ColorPicker.js"],"sourcesContent":["import classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport React, { useContext, useRef, useState } from 'react';\nimport genPurePanel from '../_util/PurePanel';\nimport { ConfigContext } from '../config-provider/context';\nimport Popover from '../popover';\nimport theme from '../theme';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style/index';\nimport { customizePrefixCls, generateColor } from './util';\nconst ColorPicker = props => {\n  const {\n    value,\n    defaultValue,\n    format,\n    allowClear = false,\n    presets,\n    children,\n    trigger = 'click',\n    open,\n    disabled,\n    placement = 'bottomLeft',\n    arrow = true,\n    style,\n    className,\n    rootClassName,\n    styles,\n    onFormatChange,\n    onChange,\n    onClear,\n    onOpenChange,\n    getPopupContainer,\n    autoAdjustOverflow = true\n  } = props;\n  const {\n    getPrefixCls,\n    direction\n  } = useContext(ConfigContext);\n  const {\n    token\n  } = theme.useToken();\n  const [colorValue, setColorValue] = useColorState(token.colorPrimary, {\n    value,\n    defaultValue\n  });\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !disabled && openData,\n    onChange: onOpenChange\n  });\n  const [colorCleared, setColorCleared] = useState(false);\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergeRootCls = classNames(rootClassName, rtlCls);\n  const mergeCls = classNames(mergeRootCls, className, hashId);\n  const mergePopupCls = classNames(prefixCls, rtlCls);\n  const popupAllowCloseRef = useRef(true);\n  const handleChange = (data, type, pickColor) => {\n    let color = generateColor(data);\n    if (colorCleared) {\n      setColorCleared(false);\n      const hsba = color.toHsb();\n      // ignore alpha slider\n      if (colorValue.toHsb().a === 0 && type !== 'alpha') {\n        hsba.a = 1;\n        color = generateColor(hsba);\n      }\n    }\n    if (!value) {\n      setColorValue(color);\n    }\n    // Only for drag-and-drop color picking\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n  const handleClear = () => {\n    setColorCleared(true);\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n  const handleChangeComplete = () => {\n    popupAllowCloseRef.current = true;\n  };\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow\n  };\n  const colorBaseProps = {\n    prefixCls,\n    color: colorValue,\n    allowClear,\n    colorCleared,\n    disabled,\n    presets,\n    format,\n    onFormatChange\n  };\n  return wrapSSR( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    onOpenChange: visible => {\n      if (popupAllowCloseRef.current) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    })),\n    overlayClassName: mergePopupCls\n  }, popoverProps), children || /*#__PURE__*/React.createElement(ColorTrigger, {\n    open: popupOpen,\n    className: mergeCls,\n    style: style,\n    color: colorValue,\n    prefixCls: prefixCls,\n    disabled: disabled,\n    colorCleared: colorCleared\n  })));\n};\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\nconst PurePanel = genPurePanel(ColorPicker, 'color-picker', /* istanbul ignore next */\nprefixCls => prefixCls, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}));\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}